<!DOCTYPE html>
<html>
<head>
    <title>EMDR Tapper</title>
    <script>
        let isVibrating = false; // Prevent overlapping patterns

        function updateControllerList() {
            const gamepads = navigator.getGamepads();
            const controllerList = document.getElementById("controller-list");
            controllerList.innerHTML = ""; // Clear existing list

            for (const gamepad of gamepads) {
                if (gamepad) {
                    const listItem = document.createElement("li");
                    listItem.textContent = `${gamepad.id} (Index: ${gamepad.index})`;
                    controllerList.appendChild(listItem);
                }
            }
        }

        async function runTapperPattern() {
            if (isVibrating) return; // Prevent overlapping patterns
            isVibrating = true;

            const gamepads = navigator.getGamepads();
            const controller = Array.from(gamepads).find(gp => gp && gp.vibrationActuator);

            if (!controller) {
                alert("A Joy-Con or supported controller is required for the tapper pattern.");
                isVibrating = false;
                return;
            }

            if (!isVibrating) return;
            await controller.vibrationActuator.playEffect("dual-rumble", {
                startDelay: 500,
                duration: 100,
                strongMagnitude: 0.7,
                weakMagnitude: 0.0
            });

            await new Promise(resolve => setTimeout(resolve, 200));
            
            if (!isVibrating) return;
            await controller.vibrationActuator.playEffect("dual-rumble", {
                startDelay: 500,
                duration: 100,
                strongMagnitude: 0.0,
                weakMagnitude: 0.9
            });
            
            await new Promise(resolve => setTimeout(resolve, 200));
            
            if (!isVibrating) return;
            await controller.vibrationActuator.playEffect("dual-rumble", {
                startDelay: 500,
                duration: 100,
                strongMagnitude: 0.7,
                weakMagnitude: 0.0
            });

            await new Promise(resolve => setTimeout(resolve, 200));
            
            if (!isVibrating) return;
            await controller.vibrationActuator.playEffect("dual-rumble", {
                startDelay: 500,
                duration: 100,
                strongMagnitude: 0.0,
                weakMagnitude: 0.9
            });
           
            await new Promise(resolve => setTimeout(resolve, 200));
                        
            if (!isVibrating) return;
            await controller.vibrationActuator.playEffect("dual-rumble", {
                startDelay: 500,
                duration: 100,
                strongMagnitude: 0.7,
                weakMagnitude: 0.0
            });

            await new Promise(resolve => setTimeout(resolve, 200));
            
            if (!isVibrating) return;
            await controller.vibrationActuator.playEffect("dual-rumble", {
                startDelay: 500,
                duration: 100,
                strongMagnitude: 0.0,
                weakMagnitude: 0.9
            });

            await new Promise(resolve => setTimeout(resolve, 200));
            
            if (!isVibrating) return;
            await controller.vibrationActuator.playEffect("dual-rumble", {
                startDelay: 500,
                duration: 100,
                strongMagnitude: 0.7,
                weakMagnitude: 0.0
            });

            await new Promise(resolve => setTimeout(resolve, 200));
            
            if (!isVibrating) return;
            await controller.vibrationActuator.playEffect("dual-rumble", {
                startDelay: 500,
                duration: 100,
                strongMagnitude: 0.0,
                weakMagnitude: 0.9
            });

            await new Promise(resolve => setTimeout(resolve, 200));
                        
            if (!isVibrating) return;
            await controller.vibrationActuator.playEffect("dual-rumble", {
                startDelay: 500,
                duration: 100,
                strongMagnitude: 0.7,
                weakMagnitude: 0.0
            });

            await new Promise(resolve => setTimeout(resolve, 200));
            
            if (!isVibrating) return;
            await controller.vibrationActuator.playEffect("dual-rumble", {
                startDelay: 500,
                duration: 50,
                strongMagnitude: 0.0,
                weakMagnitude: 0.9
            });
            await new Promise(resolve => setTimeout(resolve, 100));
            
            if (!isVibrating) return;
            await controller.vibrationActuator.playEffect("dual-rumble", {
                startDelay: 500,
                duration: 50,
                strongMagnitude: 0.0,
                weakMagnitude: 0.9
            });
            await new Promise(resolve => setTimeout(resolve, 200));
            
            if (!isVibrating) return;
            await controller.vibrationActuator.playEffect("dual-rumble", {
                startDelay: 500,
                duration: 50,
                strongMagnitude: 0.7,
                weakMagnitude: 0.0
            });
            await new Promise(resolve => setTimeout(resolve, 100));
            
            if (!isVibrating) return;
            await controller.vibrationActuator.playEffect("dual-rumble", {
                startDelay: 500,
                duration: 50,
                strongMagnitude: 0.7,
                weakMagnitude: 0.0
            });
            await new Promise(resolve => setTimeout(resolve, 200));
            
            if (!isVibrating) return;
            await controller.vibrationActuator.playEffect("dual-rumble", {
                startDelay: 500,
                duration: 50,
                strongMagnitude: 0.0,
                weakMagnitude: 0.9
            });
            await new Promise(resolve => setTimeout(resolve, 100));
            
            if (!isVibrating) return;
            await controller.vibrationActuator.playEffect("dual-rumble", {
                startDelay: 500,
                duration: 50,
                strongMagnitude: 0.0,
                weakMagnitude: 0.9
            });
            await new Promise(resolve => setTimeout(resolve, 200));
            
            if (!isVibrating) return;
            await controller.vibrationActuator.playEffect("dual-rumble", {
                startDelay: 500,
                duration: 50,
                strongMagnitude: 0.7,
                weakMagnitude: 0.0
            });
            await new Promise(resolve => setTimeout(resolve, 100));
            
            if (!isVibrating) return;
            await controller.vibrationActuator.playEffect("dual-rumble", {
                startDelay: 500,
                duration: 50,
                strongMagnitude: 0.7,
                weakMagnitude: 0.0
            });
            await new Promise(resolve => setTimeout(resolve, 200));
            
            if (!isVibrating) return;
            await controller.vibrationActuator.playEffect("dual-rumble", {
                startDelay: 500,
                duration: 50,
                strongMagnitude: 0.0,
                weakMagnitude: 0.9
            });
            await new Promise(resolve => setTimeout(resolve, 100));
            
            if (!isVibrating) return;
            await controller.vibrationActuator.playEffect("dual-rumble", {
                startDelay: 500,
                duration: 50,
                strongMagnitude: 0.0,
                weakMagnitude: 0.9
            });
            await new Promise(resolve => setTimeout(resolve, 200));
            
            if (!isVibrating) return;
            await controller.vibrationActuator.playEffect("dual-rumble", {
                startDelay: 500,
                duration: 50,
                strongMagnitude: 0.7,
                weakMagnitude: 0.0
            });
            await new Promise(resolve => setTimeout(resolve, 100));
            
            if (!isVibrating) return;
            await controller.vibrationActuator.playEffect("dual-rumble", {
                startDelay: 500,
                duration: 50,
                strongMagnitude: 0.7,
                weakMagnitude: 0.0
            });
            await new Promise(resolve => setTimeout(resolve, 200));
            
            if (!isVibrating) return;
            await controller.vibrationActuator.playEffect("dual-rumble", {
                startDelay: 500,
                duration: 50,
                strongMagnitude: 0.0,
                weakMagnitude: 0.9
            });
            await new Promise(resolve => setTimeout(resolve, 100));
            
            if (!isVibrating) return;
            await controller.vibrationActuator.playEffect("dual-rumble", {
                startDelay: 500,
                duration: 50,
                strongMagnitude: 0.0,
                weakMagnitude: 0.9
            });
            await new Promise(resolve => setTimeout(resolve, 200));
            
            isVibrating = false;
        }

        function pollGamepadInput() {
            const gamepads = navigator.getGamepads();
            const controller = Array.from(gamepads).find(gp => gp && gp.vibrationActuator);

            updateControllerList();

            if (!controller) {
                console.log("Waiting for a Joy-Con or controller to be paired.");
                return;
            }

            if (controller.buttons[7]?.pressed) { // Right Trigger
                runTapperPattern();
            }

            if (controller.buttons[6]?.pressed) { // Left Trigger
                isVibrating = false; // Stop vibration pattern
            }

            requestAnimationFrame(pollGamepadInput);
        }

        window.addEventListener("gamepadconnected", pollGamepadInput);
        window.addEventListener("gamepadconnected", updateControllerList);
        window.addEventListener("gamepaddisconnected", updateControllerList);
        
        window.addEventListener("keydown", (event) => {
            if (event.code === "Space") {
                runTapperPattern();
            }
        });
    </script>
</head>
<body>
    <h1>EMDR Tapper</h1>
    <button onclick="runTapperPattern()">Start Tapper Pattern</button>
    <h2>Connected Controllers:</h2>
    <ul id="controller-list"></ul>
</body>
</html>
